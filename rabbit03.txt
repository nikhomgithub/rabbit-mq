Publish/Subscribe
Sending messages to many consumers at once
                   // braodcast a message to multiple consumers. 
                   // send => exchange (direct(default) , topic, headers and fanout) => queue => receive
                              without binding

//To list the exchanges on the server
// $sudo rabbitmqctl list_exchanges

//To list existing bindings
// $sudo rabbitmqctl list_bindings

rabbitmqctl list_bindings

// Rabbit need to fresh & empty queue
// once disconnect consumer queue should be automatically deleted

// server choose a random queue name for us.
        channel.assertQueue('', {
// after disconnect, queue will be deleted because exclusive=true
                exclusive: true
        })

------------------------------------
emit_log.js

//creaet connection
                var amqp = require('amqplib/callback_api');

                amqp.connect('amqp://localhost', function(error0, connection) {
                        if (error0) {
                                throw error0;
                        }
//create channel
                        connection.createChannel(function(error1, channel) {
                                if (error1) {
                                        throw error1;
                                }
//declare exchange as log
                        var exchange = 'logs';
                        var msg = process.argv.slice(2).join(' ') || 'Hello World!';
//assertExchange as findout 
                        channel.assertExchange(exchange, 'fanout', {
                                durable: false
                        });
//publish (no need to binding ' ')
                        channel.publish(exchange, '', Buffer.from(msg));
                        console.log(" [x] Sent %s", msg);
                });

                        setTimeout(function() { 
                                connection.close(); 
                                process.exit(0); 
                        }, 500);
                });

------------------------------
receive_logs.js:

//declare dependency
                var amqp = require('amqplib/callback_api');
//create connection
                amqp.connect('amqp://localhost', function(error0, connection) {
                        if (error0) {
                                throw error0;
                        }
//create channel                        
                        connection.createChannel(function(error1, channel) {
                if (error1) {
                        throw error1;
                }
                var exchange = 'logs';
//assert exchange
//fanout exchanges ignored its binding
                channel.assertExchange(exchange, 'fanout', {
                        durable: false
                });
//assert queue 

                channel.assertQueue('', {
                                exclusive: true
                        }, 
                        function(error2, q) {
                                if (error2) {
                                        throw error2;
                        }
                console.log(" [*] Waiting for messages in %s. To exit press CTRL+C", q.queue);
//fanout exchanges ignored its binding
                channel.bindQueue(q.queue, exchange, '');

                channel.consume(q.queue, function(msg) {
                        if(msg.content) {
                        console.log(" [x] %s", msg.content.toString());
                        }
                }, {
                        noAck: true
                });
                });
                });
                });


//to see the logs on your screen
$./receive_logs.js
