//https://medium.com/@pulkitswarup/microservices-asynchronous-request-response-pattern-6d00ab78abb6


Rest API => http => synchronous

Synchronous:
    High latency (slow) : client --> req ==> server(long processing) ==>  res --> client

Asynchronous + mq broker:
    client    --> req --------------> requester ==> pub ==> queue ==> cons ==> provider 
              <-- res(requestId)----  "processing.request"                         || 
                                                                                  // 
                                                                                 //
                                                                                //
                                                                               //  
                                      requester <== cons<== queue <== pub <===//
                                      "processing.result" 

++++++++++++++++++++++++++++++++++++++++++++++++
pattern of publich consume 
++++++++++++++++++++++++++++++++++++++++++++++++
//rest api 
//WebService Code
//requester 

app.post('/api/v1/processData', async function (req, res) {
    let connection = await amqp.createConnection({ host: 'localhost', port: 5672 });
    let channel = await connection.createConfirmChannel();

    await publishToChannel(channel, 
        {   routingKey: "request", 
            exchangeName: "processing", 
            data: { requestId, requestData } 
        }
    );

    res.send({ requestId })
}

// utility function to publish messages to a channel
    function publishToChannel(channel, { routingKey, exchangeName, data }) {
        return new Promise((resolve, reject) => {
            channel.publish(exchangeName, routingKey, Buffer.from(JSON.stringify(data), 'utf-8'), { persistent: true }, function (err, ok) {
            if (err) {
                return reject(err);
            }

            resolve();
            })
        });
    }

//listenForResults();

    async function listenForResults() {
        // connect to Rabbit MQ
        let connection = await amqp.connect(messageQueueConnectionString);

        // create a channel and prefetch 1 message at a time
        let channel = await connection.createChannel();
        await channel.prefetch(1);

        // start consuming messages
        await consume({ connection, channel });
    }

    // consume messages from RabbitMQ
        function consume({ connection, channel, resultsChannel }) {
            return new Promise((resolve, reject) => {
                channel.consume("processing.results", async function (msg) {
                    // parse message
                    let msgBody = msg.content.toString();
                    let data = JSON.parse(msgBody);
                    let requestId = data.requestId;
                    let processingResults = data.processingResults;
                    console.log("Received a result message, requestId:", requestId, "processingResults:", processingResults);

                    // acknowledge message as received
                    await channel.ack(msg);
                });

                // handle connection closed
                connection.on("close", (err) => {
                    return reject(err);
                });

                // handle errors
                connection.on("error", (err) => {
                    return reject(err);
                });
            });
        }
=======================================
=======================================
//ProcessorService Code

//listenForMessages();
    async function listenForMessages() {
        // connect to Rabbit MQ
        let connection = await amqp.connect(messageQueueConnectionString);

        // create a channel and prefetch 1 message at a time
        let channel = await connection.createChannel();
        await channel.prefetch(1);

        // create a second channel to send back the results
        let resultsChannel = await connection.createConfirmChannel();

        // start consuming messages
        await consume({ connection, channel, resultsChannel });
    }

// consume messages from RabbitMQ
function consume({ connection, channel, resultsChannel }) {
  return new Promise((resolve, reject) => {
    channel.consume("processing.requests", async function (msg) {
      // parse message
      let msgBody = msg.content.toString();
      let data = JSON.parse(msgBody);
      let requestId = data.requestId;
      let requestData = data.requestData;
      console.log("Received a request message, requestId:", requestId);

      // process data
      let processingResults = await processMessage(requestData);

      // publish results to channel
      await publishToChannel(resultsChannel, {
        exchangeName: "processing",
        routingKey: "result",
        data: { requestId, processingResults }
      });
      console.log("Published results for requestId:", requestId);

      // acknowledge message as processed successfully
      await channel.ack(msg);
    });

    // handle connection closed
    connection.on("close", (err) => {
      return reject(err);
    });

    // handle errors
    connection.on("error", (err) => {
      return reject(err);
    });
  });
}